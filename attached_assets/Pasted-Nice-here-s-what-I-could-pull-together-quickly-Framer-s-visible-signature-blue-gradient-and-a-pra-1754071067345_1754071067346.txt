Nice, here’s what I could pull together quickly—Framer’s visible “signature” blue gradient and a practical way to consume it in your Replit project.

### 1. Core colors we can confidently extract

From Framer’s own blog about gradients, their example gradient in code uses these two blues:

* **Start:** `#0AF` → expanded: `#00AAFF`
* **End:** `#05F` → expanded: `#0055FF`

That’s their bright accent/gradient duo that gives the “Framer blue” vibe in headers, highlights, and interactive elements. ([Medium][1])

> **Note:** Framer’s full live site UI (dark background, text, subtle grays, etc.) isn’t published as a static public palette in the docs I found—so for the rest of the “exact” computed values (backgrounds, secondary grays, etc.) the most precise method is to open framer.com in a browser, right-click, Inspect Element, and copy the computed styles or CSS variables directly from their stylesheet. I can help you write a tiny script/snippet to scrape those in your dev environment if you want, but it requires doing that inspection in-browser.

---

### 2. Suggested extended palette (to approximate their dark UI vibe, based on common Framer-style minimal dark themes)

You can start with these and refine by grabbing exact values via devtools later:

```json
{
  "framer": {
    "gradient-start": "#00AAFF",
    "gradient-end": "#0055FF",
    "background": "#0F111A",      // typical deep dark canvas
    "surface": "#1E2030",         // cards/containers
    "muted": "#8A8FAD",           // secondary text
    "text": "#FFFFFF",            // primary text
    "border": "#2A2D44",          // subtle divisions
    "radius": "0.75rem"           // for consistent rounding if you want
  }
}
```

(You can replace any of these with the exact computed values once you pull them with devtools.)

---

### 3. Prompt for Replit (to give to its AI assistant / automation)

> \*\*“Use Framer’s dark-mode-inspired color system in this project.
>
> 1. Define a theme object / Tailwind extension with the following base colors: gradient start `#00AAFF`, gradient end `#0055FF`, background `#0F111A`, surface `#1E2030`, muted text `#8A8FAD`, primary text `#FFFFFF`, and borders `#2A2D44`.
> 2. Configure dark mode support so components adapt: background and surfaces switch appropriately, and text maintains accessible contrast.
> 3. Create utility classes or tokens for:
>
>    * `--color-gradient` that smoothly interpolates from `#00AAFF` to `#0055FF` (e.g., for buttons and headers).
>    * Card backgrounds using `surface` with soft shadows and border radius of `0.75rem`.
>    * Primary buttons using the gradient with a subtle hover animation (slightly shifting gradient or lightening).
>    * Secondary text using `muted`, and ensure link/interactive states use the bright blue accent (`#00AAFF`).
> 4. Expose the theme so it can be easily overridden or extended later (e.g., via a `theme.js` or Tailwind config).
> 5. Ensure all text meets WCAG AA contrast against its background.”\*\*

If you tell me what stack you’re using inside Replit (e.g., vanilla React/Tailwind, Next.js, etc.), I can immediately give you the actual `tailwind.config.js` snippet or a small theme module to drop in.

---

Would you like me to generate the Tailwind config file for your current project setup next?

[1]: https://medium.com/framer-prototyping/introducing-framer-gradients-c5975a4129ec?utm_source=chatgpt.com "Introducing Framer Gradients. Create, customize, and ..."
